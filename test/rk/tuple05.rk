
var x = (3, "hello")

sub f(y: [Int, String])
	#=>3
	print(y.1)
	
	#=>hello
	print(y.2)

f(x)

###
タプルを引数にとる
###

###start
.assembly extern System.Console {}
.assembly extern System.Runtime {}
.assembly tuple05 {}
.class public 'Tuple#2<int32, string>'
{
    .field public static int32 '#type_no'
    .field public static class [System.Runtime]System.Object[] '#type_generics'
    
    .field public int32 '1'
    .field public string '2'
    
    .method private static void .cctor()
    {
        ldc.i4.0
        stsfld int32 'Tuple#2<int32, string>'::'#type_no'
        
        ldc.i4.2
        stsfld class [System.Runtime]System.Object[] 'Tuple#2<int32, string>'::'#type_generics'
        ret
    }
    
    .method public void .ctor()
    {
        
        
        ret
    }
}
.method public static void main()
{
    .entrypoint
    .maxstack 2
    .locals(
        [0] class 'Tuple#2<int32, string>' x
    )
    
    ldc.i4.3
    ldstr "hello"
    call class 'Tuple#2<int32, string>' 'Tuple#2'(int32, string)
    stloc.0
    
    ldloc.0
    call void f(class 'Tuple#2<int32, string>')
    ret
}
.method public static class 'Tuple#2<int32, string>' 'Tuple#2'(int32, string)
{
    .maxstack 2
    .locals(
        [0] class 'Tuple#2<int32, string>' $self
    )
    
    newobj instance void class 'Tuple#2<int32, string>'::.ctor()
    stloc.0
    
    ldloc.0
    ldarg.0
    stfld int32 class 'Tuple#2<int32, string>'::'1'
    
    ldloc.0
    ldarg.1
    stfld string class 'Tuple#2<int32, string>'::'2'
    
    ldloc.0
    ret
    ret
}
.method public static void f(class 'Tuple#2<int32, string>')
{
    .maxstack 1
    .locals(
        [0] int32 $$1,
        [1] string $$2
    )
    
    ldarg.0
    ldfld int32 class 'Tuple#2<int32, string>'::'1'
    stloc.0
    
    ldloc.0
    call void class [System.Console]System.Console::WriteLine(int32)
    
    ldarg.0
    ldfld string class 'Tuple#2<int32, string>'::'2'
    stloc.1
    
    ldloc.1
    call void class [System.Console]System.Console::WriteLine(string)
    ret
}
###end
