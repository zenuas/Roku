
var f = x => print(x)

#=>1
f(1)

#=>hello
f("hello")

###
引数のあるラムダ式

ラムダ式の引数xの型指定がないためジェネリック関数になる
同一レキシカルスコープに変数バインドと関数式があるため
関数呼び出し側とバインドした変数が同一変数に解決される
しかし、呼び出し毎に引数によって別のFunctionMapperを割り当てる必要がある
###

###start
.assembly extern System.Console {}
.assembly extern System.Runtime {}
.assembly extern mscorlib {}
.assembly sub06 {}
.method public static void main()
{
    .entrypoint
    .maxstack 2
    .locals(
        [0] class [mscorlib]System.Action`1<int32> ,
        [1] class [mscorlib]System.Action`1<string> 
    )
    
    ldnull
    ldftn void 'anonymous#0'(int32)
    newobj instance void class [mscorlib]System.Action`1<int32>::.ctor(object, native int)
    stloc.0
    
    ldnull
    ldftn void 'anonymous#0'(string)
    newobj instance void class [mscorlib]System.Action`1<string>::.ctor(object, native int)
    stloc.1
    
    ldloc.0
    ldc.i4.1
    callvirt instance void class [mscorlib]System.Action`1<int32>::Invoke(!0)
    
    ldloc.1
    ldstr "hello"
    callvirt instance void class [mscorlib]System.Action`1<string>::Invoke(!0)
    ret
}
.method public static void 'anonymous#0'(int32)
{
    .maxstack 1
    
    ldarg.0
    call void class [System.Console]System.Console::WriteLine(int32)
    ret
}
.method public static void 'anonymous#0'(string)
{
    .maxstack 1
    
    ldarg.0
    call void class [System.Console]System.Console::WriteLine(string)
    ret
}
###end
